##########################################################################
#
# General settings (see below for an explaination of the syntax)
#

background(#283848)
labelColor(#70D0D0)
labelAdjust(0.9)



##########################################################################
#
# Autopilot
#
# This is just a more sophistiicated version of the 5-column version that
# is baked into the program. Note how that clicking on one of the red buttons
# will transfer the value there into the corrisonding numeric field to its
# left. Note also the use of xMFD and xVIS to help with flipping various
# screens.
#

instrument(Autopilot)
columns(5)
width(268)
height(432)

txt(xAOT T)  btn(hNAV1)   btn(hNAV2)          btn(hGPS)    btn(aAP)
txt(cMARK)   lab(RA:)     txt(cRA)            lab(DH:)     txt(cDH)
num(nALT)                 txt(cALT #B00000)   btn(aALT)    btn(aVNAV #808080)
num(nHDG)                 txt(cHDG #B00000)   btn(aHDG)    btn(aNAV LOC)
num(nVS )                 txt(cVS  #B00000)   btn(aVS)     btn(aWLV)
num(nTHR)                 txt(cIAS #770077)   btn(aTHR)    btn(aGS)
gap()        lab(AOA:)    txt(cAOA)           txt(cFLAP)   btn(aBC)
gap()        lab(PWR:)    txt(xPPWR)          txt(cGEAR)   btn(aFLC)
gap()        lab(Trim:)   txt(cPTCH)          txt(cYAW)    txt(cROLL)
btn(mAPP)    btn(mVOR)    btn(mNAV)           btn(mARC)    btn(mPLN PLAN)
btn(sPOS)    btn(sDATA)   lab(RNGE:)          num(nZOOM)
btn(sARPT)   btn(sWPT)    btn(sVOR)           btn(sNDB)    btn(sTFC)

btn(xMFD)
btn(xVIS XTRA[EICAS,Calibrate,Radios,Info])
txt(xSTPW)
lab(DIS:)
txt(cDIST)

# Note - Line breaks do not have any effect, so the last 5 lines is one row.



##########################################################################
#
# Commentator
#
# This is a general kind of annumciator panel, though the focus is as much
# on trying to spot pilot faults as hardware faults. It is called the
# commentator panel because it is making commentry on what the pilot is
# doing. The general idea is that for most of the flight nothing should
# appear here, so when anything does appear it might be signifcant. Green
# things are very normal, yellow may be of concern, and red might indicate
# something that could "ruin your whole day..."
#
# You will need to enable some of the warning messages in the preferences.
# Also, if you click on an item and you get an explaination.
#

instrument(Commentator)
columns(10)
width(800)
height(60)

btn(xCOMM)



##########################################################################
#
# Power calibration
#
# The value for the xPPWR (percentage power) button above is calculated
# by using some engine parameter (as selected here) and comparing it to
# a maximum limit. To set it up, select one of the buttons below and either
# dial in the maximum value, or alternativly set maximum throttle and right
# click the red button to transfer the value across.
#

instrument(Calibrate)
columns(4)
width(250)
height(250)

gap()        lab(Value)       lab(Max)  gap()
lab(N1:)     txt(xPSET N1)    num(xPROP powerMaxN1)
lab(EPR:)    txt(xPSET EPR)   num(xPROP powerMaxEPR)
lab(TRQ:)    txt(xPSET TRQ)   num(xPROP powerMaxTRQ)
lab(MAP:)    txt(xPSET MAP)   num(xPROP powerMaxMAP)
lab(PROP:)   txt(xPSET RPM)   num(xPROP powerMaxRPM)
lab(FF:)     txt(xPSET FF)    num(xPROP powerMaxFF)



##########################################################################
#
# Radios
#
# Kind of boring, but a heck of a lot less boring that trying to twiddle
# some of the X-Plane aircraft knobs. Use right click to set KHz values and
# auto-repeat to speed up ADF digits. Left click the Baro window to set it
# to standard pressure and right click to swap between IN and HPA.
#

instrument(Radios)
columns(8)
width(450)
height(150)

lab(COM1:)   btn(rCURR COM1 #00B000)   num(rSDBY COM1)
lab(COM2:)   btn(rCURR COM2 #00B000)   num(rSDBY COM2)
lab(NAV1:)   btn(rCURR NAV1 #00B000)   num(rSDBY NAV1)
lab(NAV2:)   btn(rCURR NAV2 #00B000)   num(rSDBY NAV2)
lab(ADF1:)   btn(rCURR ADF1 #00B000)   num(rSDBY ADF1)
lab(ADF2:)   btn(rCURR ADF2 #00B000)   num(rSDBY ADF2)

lab(XPDR:)
gap()
btn(rXPDR #0000B0 0)
btn(rXPDR #0000B0 1)
btn(rXPDR #0000B0 2)
btn(rXPDR #0000B0 3)
gap()
btn(rXPDR #00B0B0 M)



##########################################################################
#
# Info
#
# Useful things for fuel endurance, but also a graveyard for those buttons
# that just could not make it!
#

instrument(Info)
columns(4)
width(230)
height(280)

lab(Fuel:)   txt(cFUEL)   gap()        gap()
lab(Flow:)   txt(cFF)     lab(Flow%:)  txt(cFFP)
lab(Endu:)   txt(cENDU)   lab(Dist:)   txt(cRNGE)
lab(Baro:)   gap()        num(cBARO)
lab(OBS1:)   gap()        num(cOBS1)
lab(OBS2:)   gap()        num(cOBS2)
lab(TAT:)    txt(cTAT)    lab(Wind:)   txt(cWVEC)
lab(GS:)     txt(cGS)     lab(Time:)   txt(xTIME)



##########################################################################
#
# Syntax:
#
#     <item>(<parameter> <parameter> ...) ...
#
# Where <item> is one of:
#
# instrument(<name>)     - Start the definition of a new instrment panel
# background(#<color>)   - Set the background color
# columns(<number>)      - Define the number of button columns
# width(<number>)        - Specify the preferred width
# height(<number>)       - Specify the preferred height
# labelColor(#<color>)   - Specify the text color for labels
# labelAdjust(<number>)  - Specify the font size reduction for label text
#
# gap()                  - Leave a gap in the current row (one column width)
# lab(<text>)            - Create a label                 (one column width)
# btn(<id> [<parm(s)>])  - Create a fixed text button     (one column width)
# txt(<id> [<parm(s)>])  - Create a variable text button  (one column width)
# num(<id> [<parm(s)>])  - Create number window           (two column widths)
#
# The last three items are the interesting ones. The <id> is one of around sixty
# odd Java classes that define a button on a panel. Each one has a generalized
# name "xXXX" where the initial lowercase letter is a used to group the buttons
# functionally, and the remaining 3 or 4 letters are the text of the button.
#
# The groups are:
#
#    aXXX - Autopilot function
#    cXXX - Aircraft function
#    nXXX - Number window
#    hXXX - HSI source
#    mXXX - ND map mode
#    sXXX - ND map symbols
#    rXXX - Radio function
#    xXXX - Something else
#
# Many buttons are quite specific, and rather than document them all here, it is
# probably simpler to look at the code in the file Buttons.java. There are however
# a few general things worth mentioning. All buttons get there own name as text, so:
#
#    btn(aALT)
#
# will get the text "ALT" written on it. The text can however be changed so:
#
#    btn(aNAV LOC)
#
# will use the code in the class aNAV but will have "LOC" written on it. Another
# general parameter will specify the button's background color so:
#
#    btn(aVNAV #808080)
#
# will cause the button to be gray, rather than black, which is the default. Both of
# the above options work the same for "txt" buttons, and in fact the only real
# difference between "btn" and "txt" is the latter has a default button color that is
# the same as the background color of the panel.
#
# Four special buttons are:
#
# zAOT  - This toggles the "always on top" status of all the windows, and also hides
#         the primary XHSI window when active.
#
# xCOMM - This is the "commentator" window where various kinds of annunciator items
#         appear. This button will consume the width of all the remaining columns in
#         it's row.
#
# xMFD  - This cycles through the MFD windows. If you right click, you get prompted
#         for the IACO code for the airport chart which will then get locked to this
#         airport in until a blank text field is specified.
#
# xVIS  - This cycles through a specified list of instrument names, making one of them
#         visible at a time. Right click to hide the active window. The parameters for
#         this button are:
#
#             <text>'['<name>,<name>,...']'
#
#         where <text> is the text to appear on the button, and <name> is an
#               instrument name.
#
# Many buttons will do different things with a right click, again look at the code
# to see (it is hopefully pretty easy to understand even for non-progrmmers). A
# search for "boolean right" will quickly get you to all the right click logic.
# All the buttons on the adjustable numeric fields ("num") will respond to
# right clicks in various ways. Often by producing a "times ten" jump. These buttons
# also respond to a "repeat hold" when the mouse is held down that will produce a
# "times five" effect every 100 milliseconds.
#
# Adding a new button should be pretty easy. All you need to do is add a new class
# in Buttons.java (or make a seporate file like xCOMM.java has been done) and then
# edit it into this file somewhere. (And the search order is first to look for a
# separate class and then to look for one in Buttons.java. This means if you can
# override a button in Buttons.java by creating a seporate Java file with the same
# class name.)
#
# Apart from the various methods to do things like set button/bounding box color etc.
# (which should be fairly obvious from looking at some of the existing buttons), it
# is worth knowing about the code in Analisys.java. This class defines an instance
# record that is created on every data update (every new pactet arrival). This is
# done once only for all the instruments specified in this file. This has two potental
# advantages: a) you can avoid repeating the same calculation for different buttons,
# and b) it is sometimes easier to workout what several buttons should do in one place.
